java -jar payara-micro-5.2021.5.jar --deploy DoctorClientApp/artifact/DoctorClientApp.war --port 8085 --addlibs mysql-connector-java-8.0.23.jar --domainconfig domain.xml


#####Create ServiceApp#####


Step-1 

	=> create PU in META-INF
		<?xml version="1.0" encoding="UTF-8"?>
		<persistence version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
		  <persistence-unit name="FreelancerPU" transaction-type="JTA">
		    <jta-data-source>jdbc/FreelancerJNDI</jta-data-source>
		    
		    <exclude-unlisted-classes>false</exclude-unlisted-classes>
		    <properties/>
		  </persistence-unit>
		</persistence>

Step-2
	=>	Create Entity

Step-3
	=>	Create Model (CDI)

		@Named
		@ApplicationScoped
		public class ServiceModel {
		    @PersistenceContext(unitName = "FreelancerPU")
		    EntityManager em;
		    
		    Collection<DegreeTB> getAllDegree;
		}

Step-4
	=>	Create Service
		@Path("/degree")
		public class resource {
		    @Inject ServiceModel sm;
		    
		    @GET
		    @RolesAllowed("Admin")
		    @Produces(MediaType.APPLICATION_JSON)
		    public Collection<DegreeTB> GetDegreeResourceMethod()
		    {
			return sm.getGetAllDegree();
		    }
		}

#####Create ClientApp#####

Step-1
	=> Create META-INF microprofile-config
		myclient/mp-rest/url=http://localhost:8084/DoctorServiceApp/rest

Step-2
	=>Create Model
		public class ClientModel implements Serializable{
		    private static final long serialVersionUID = 1L;
		    private Integer degreeID;
		    private String degree;
		}

Step-3

	=>Create ServiceClient =>INTERFACE
		@Path("/degree")
		@ApplicationScoped
		@RegisterRestClient(configKey = "myclient")
		public interface DegreeClientResorce {
		    
		    
		    @ClientHeaderParam(name = "authorization",value = "{generateJWTToken}")
		    
		    @GET
		    @Produces(MediaType.APPLICATION_JSON)
		    public Collection<ClientModel> GetDegreeResourceMethod();
		    
		    default String generateJWTToken()
		    {
			Config config = ConfigProvider.getConfig();
			String token = "Bearer " + config.getValue("jwt-string", String.class);
			return token;
		    }
		    
		}

Step-4

	=>Create Servlet
		@Inject @RestClient DegreeClientResorce dc;
	    	Collection<ClientModel> degrees;

		 try{
		        degrees = dc.GetDegreeResourceMethod();
		        for(ClientModel d :degrees)
		        {
		            out.println("<h1>Degree " + d.getDegree() + "</h1>");
		        }
		    }catch(Exception ex)
		    {
		        out.println("<h1>Error " + ex.getMessage() + "</h1>");
		    }
				


#####Create JWT#####

Step-1
	=>ServiceApp
	config->bootstrap.java
		@LoginConfig(authMethod = "MP-JWT")
		@DeclareRoles({"Admin","Superviser"})

Step-2
	=>Service->Resource
		@RolesAllowed("Admin")

Step-3
	=>ClientApp
	=>microprofile-config file
		jwt-string

Step-4
	=>ClientResource
	

Step-5
	=>java -jar jarfilename

Step-6
	=>ServiceApp->microprofile-config->issuer and public key paste




#####Create AdminLogin#####

Step-1
	=>ClientApp
	=>Auth->AuthMechanisum.java
	
Step-2
	=>Project->project.java
		@DatabaseIdentityStoreDefinition(
		dataSourceLookup = "jdbc/FreelancerJNDI",
	        callerQuery = "select password from users where username = ?",
		groupsQuery = "select GROUPNAME from groups where username = ?",
		hashAlgorithm = Pbkdf2PasswordHash.class,
		priority = 30)

		@ApplicationScoped
		public class project {
		    
		}

	=>myCreaditional.java
		@ApplicationScoped
		@Named
		public class myCreadentials implements Serializable{
		    
		    private static String subject;
		    private static List<String> groups;
		    private static String loginStatus;
		    private static String stausMessage;

Step-3
	=>create servlet Home
		try (PrintWriter out = response.getWriter()) {
            
		    HttpSession session = request.getSession();
		    /* TODO output your page here. You may use following sample code. */
		   
		     if(session.getAttribute("status")!=null){
		    if(session.getAttribute("status").toString().equals("Login_Success"))
		    {    

		       RequestDispatcher rd = request.getRequestDispatcher("/AdminServlet");
		            rd.forward(request, response);
		    } 
		    else if(session.getAttribute("status").toString().equals("Login_Failed"))
		    {
		         message = session.getAttribute("statusmessage").toString();
		    }
		    }
		    
		    /* TODO output your page here. You may use following sample code. */
		    out.println("<!DOCTYPE html>");
		    out.println("<html>");
		    out.println("<head>");
		    out.println("<title>Servlet Home</title>");            
		    out.println("</head>");
		    out.println("<body>");
		    out.println(" <form method=\"POST\">\n" +
	"            <table>\n" +
	"                <tr>\n" +
	"                    <td colspan=\"2\">Login:</td>\n" +
	"                </tr>\n" +
	"                <tr>\n" +
	"                    <td>User Name:</td>\n" +
	"                    <td><input type=\"text\" name=\"username\"/></td>\n" +
	"                </tr>\n" +
	"\n" +
	"                <tr>\n" +
	"                    <td>Password:</td>\n" +
	"                    <td><input type=\"password\" name=\"password\"/></td>\n" +
	"                </tr>\n" +
	"                <tr>\n" +
	"                    <td><input type=\"submit\" name=\"submit\" value=\"submit\"/></td>\n" +
	"                    <td><input type=\"reset\"/></td>\n" +
	"                </tr>\n" +
	"            </table>\n" +
	"        </form>\n" +
	"        <br/>\n" +
	"        ");
		    out.println("</body>");
		    out.println("</html>");
		}

Step-4	Create AdminServlet
		HttpSession session = request.getSession();
		     out.println("<h1>Hello "+ session.getAttribute("uname")+" belonging to ");
		    
		        List groups = (List) session.getAttribute("groups");
		        
		        out.println(groups.toString()+"</h1>");
		    out.println("<a href=\"/DoctorClientApp/Display\">  Shop Store </a>\n" +
	"        <br><br><br><a href='Logout'>Log out </a>");


#######################################################################################################3

Search

	public Collection<WorkPostTB> SerachByCompanyName(String companyName) {
        Collection<WorkPostTB> workPosts = em.createQuery("SELECT w FROM CompanyTB c,WorkPostTB w WHERE c=w.companyID AND c.companyName LIKE :companyName").setParameter("companyName", companyName).getResultList();
        return workPosts;
-----------------------------------------------------------------------------------------

    }

@Override
    public void AddState(String StateName) {
        StateTB state = new StateTB(StateName);
        em.persist(state);
    }

    @Override
    public void UpdateState(Integer StateID, String StateName) {
        StateTB state = em.find(StateTB.class, StateID);
        state.setStateName(StateName);
        em.merge(state);
    }

    @Override
    public void DeleteState(Integer StateID) {
        StateTB state = em.find(StateTB.class, StateID);
        em.remove(state);
    }

    @Override
    public Collection<CityTB> GetAllStateWiseCity(Integer StateID) {
        StateTB state = em.find(StateTB.class, StateID);
        return state.getCityTBCollection();
    }

    @Override
    public void AddStateWiseCity(String CityName, Integer StateID) {
        StateTB state = em.find(StateTB.class, StateID);
        Collection<CityTB> cities = state.getCityTBCollection();
        CityTB city = new CityTB(CityName);
        cities.add(city);
        city.setStateID(state);
        state.setCityTBCollection(cities);
        em.persist(city);
        em.merge(state);
    }

    @Override
    public void UpdateStateWiseCity(Integer CityID, String CityName, Integer StateID) {
       StateTB state = em.find(StateTB.class, StateID);
       CityTB city = em.find(CityTB.class, CityID);
       
       Collection<CityTB> cities = state.getCityTBCollection();
       
           city.setCityName(CityName);
           city.setStateID(state);
           state.setCityTBCollection(cities);
           em.merge(city);
           em.merge(state);
           
       
    }

    @Override
    public void DeleteStateWiseCity(Integer CityID, Integer StateID) {
        StateTB state = em.find(StateTB.class, StateID);
        CityTB city = em.find(CityTB.class, CityID);
        
        Collection<CityTB> cities = state.getCityTBCollection();
        if(cities.contains(city))
        {
            cities.remove(city);
            state.setCityTBCollection(cities);
            em.remove(city);
            em.merge(state);
        }
    }
    
    public Collection<FreelancerTB> SerachByHourlyRate(String Start_hourlyRateID, String End_hourlyRateID) {
        Collection<FreelancerTB> freelancerTBs = em.createQuery("SELECT f FROM FreelancerTB f,HourlyRateTB h WHERE h=f.hourlyRateID AND h.rate BETWEEN :Start_hourlyRateID AND :End_hourlyRateID").setParameter("Start_hourlyRateID", Start_hourlyRateID).setParameter("End_hourlyRateID", End_hourlyRateID).getResultList();
        return freelancerTBs;
    }
    
    public Collection<DegreeTB> SerachByDegreeName(String degree)
    {
        Collection<DegreeTB> degreeTBs = 
                em.createQuery("select d from DegreeTB d where d.degree LIKE :degree")
                .setParameter("degree", degree).getResultList();
        return degreeTBs;
    }
    
    
  ---------------------------------------------------------------------
  additional properties:
  
  Driver = com.mysql.jdbc.Driver
  driverClass = com.mysql.jdbc.Driver
  portNumber = 3306
  user = root
  password = root
  ServerName = localhost
  databaseName = sem9
  url = jdbc:mysql://localhost:3306/sem9
  URL = jdbc:mysql://localhost:3306/sem9
  

